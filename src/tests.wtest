import snake.*
import wollok.game.*

describe "Directions" {

	const unaPosicion = game.at(2, 2)

	test "toUp.next devuelve una posicion arriba" {
		assert.equals(game.at(2, 3), toUp.next(unaPosicion))
	}

	test "toDown.next devuelve una posicion abajo" {
		assert.equals(game.at(2, 1), toDown.next(unaPosicion))
	}

	test "toRight.next devuelve una posicion a la derecha" {
		assert.equals(game.at(3, 2), toRight.next(unaPosicion))
	}

	test "toLeft.next devuelve una posicion a la izquierda" {
		assert.equals(game.at(1, 2), toLeft.next(unaPosicion))
	}

	test "toUp.previous devuelve una posicion abajo" {
		assert.equals(game.at(2, 1), toUp.previous(unaPosicion))
	}

	test "toDown.previous devuelve una posicion arriba" {
		assert.equals(game.at(2, 3), toDown.previous(unaPosicion))
	}

	test "toRight.previous devuelve una posicion a la izquierda" {
		assert.equals(game.at(1, 2), toRight.previous(unaPosicion))
	}

	test "toLeft.previous devuelve una posicion a la derecha" {
		assert.equals(game.at(3, 2), toLeft.previous(unaPosicion))
	}

}

describe "Food" {

	method isInsideBoard(pos) {
		const tooHight = pos.y() >= game.height()
		const tooLow = pos.y() < 0
		const tooRight = pos.x() >= game.width()
		const tooLeft = pos.x() < 0
		return not tooHight && not tooLow && not tooRight && not tooLeft
	}

	test "randomPos devuelve una posicion dentro de los limites" {
		game.height(10)
		game.width(10)
		assert.that(self.isInsideBoard(food.randomPos()))
	}
	
	test "collideWithSnake aumenta timesCollided y cambia la posicion de food" {
		const posInicial = food.position()
		// Agrego el evento onTick para que no falle el metodo collideWithSnakeHead
		game.onTick(snakeHead.speed(0), "MOVE SNAKE", { snakeHead.changePosition() })
		food.collideWithSnakeHead(snakeHead)
		assert.notEquals(posInicial, food.position())
		assert.equals(1, food.timesCollided())
	}

}

