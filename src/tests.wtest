import snake.*
import wollok.game.*
import colliders.*
import gameAdministrator.*

describe "Directions" {

	const unaPosicion = game.at(2, 2)

	test "toUp.next devuelve una posición arriba" {
		assert.equals(game.at(2, 3), toUp.next(unaPosicion))
	}

	test "toDown.next devuelve una posición abajo" {
		assert.equals(game.at(2, 1), toDown.next(unaPosicion))
	}

	test "toRight.next devuelve una posición a la derecha" {
		assert.equals(game.at(3, 2), toRight.next(unaPosicion))
	}

	test "toLeft.next devuelve una posición a la izquierda" {
		assert.equals(game.at(1, 2), toLeft.next(unaPosicion))
	}

	test "toUp.previous devuelve una posición abajo" {
		assert.equals(game.at(2, 1), toUp.previous(unaPosicion))
	}

	test "toDown.previous devuelve una posición arriba" {
		assert.equals(game.at(2, 3), toDown.previous(unaPosicion))
	}

	test "toRight.previous devuelve una posición a la izquierda" {
		assert.equals(game.at(1, 2), toRight.previous(unaPosicion))
	}

	test "toLeft.previous devuelve una posición a la derecha" {
		assert.equals(game.at(3, 2), toLeft.previous(unaPosicion))
	}

}

describe "Food" {

	method isInsideBoard(pos) {
		const tooHight = pos.y() >= game.height()
		const tooLow = pos.y() < 0
		const tooRight = pos.x() >= game.width()
		const tooLeft = pos.x() < 0
		return not tooHight && not tooLow && not tooRight && not tooLeft
	}

	test "randomPos devuelve una posición dentro de los limites" {
		game.height(10)
		game.width(10)
		assert.that(self.isInsideBoard(apple.randomPos()))
	}

	test "collideWithSnake aumenta timesCollided y cambia la posición de apple" {
		apple.addVisual()
		const posInicial = apple.position()
		// Agrego el evento onTick para que no falle el método collideWithSnakeHead
		game.onTick(snakeHead.speed(), "MOVE SNAKE", { snakeHead.changePosition() })
		apple.collideWithSnakeHead(snakeHead)
		assert.notEquals(posInicial, apple.position())
		assert.equals(1, gameAdministrator.timesCollided())
	}
	
	test "Al comer banana, disminuye su tamaño" {
		snakeHead.addBodyPart()
		assert.notEquals(null, snakeHead.next()) // verifico que tiene una parte agregada
		banana.addVisual()
		game.onTick(snakeHead.speed(), "MOVE SNAKE", { snakeHead.changePosition() })
		banana.collideWithSnakeHead(snakeHead)
		assert.equals(null, snakeHead.next()) // pierde la parte agregada
	}
	
	test "Al comer orange, desaparece todo el body" {
		4.times({ i => snakeHead.addBodyPart() })
		orange.addVisual()
		game.onTick(snakeHead.speed(), "MOVE SNAKE", { snakeHead.changePosition() })
		orange.collideWithSnakeHead(snakeHead)
		assert.equals(null, snakeHead.next()) // pierde todas las partes agregadas
	}
	
}

describe "Obstacles" {
	
	test "Los objetos se generan en un lugar vacío" {
		const piedras = []
		const tamanio = (game.height() - 1) * (game.width() - 1)
		tamanio.times({ i => piedras.add( new Obstacle() ) }) // lleno todo el mapa de piedras
		piedras.forEach({ piedra => piedra.addVisual() })
		assert.that( piedras.all({ piedra => piedra.emptyPlace() }) ) // cada piedra debe tener lugares diferentes (no se superponen al spawnear)
	}
	
	test "Si choca con un obstacle, pierde" {
		game.onTick(snakeHead.speed(), "MOVE SNAKE", { snakeHead.changePosition() })
		const piedra = new Obstacle()
		assert.throwsException({ piedra.collideWithSnakeHead(snakeHead) })
	}
	
}

describe "SnakeHead y SnakeBody" {

	test "addBodyPart genera un nuevo SnakeBody donde 'next' es nulo" {
		assert.equals(null, snakeHead.next())
		snakeHead.addBodyPart()
		const body1 = snakeHead.next()
		assert.notEquals(null, body1)
		assert.equals(null, body1.next())
		snakeHead.addBodyPart()
		assert.notEquals(null, body1.next())
		assert.equals(null, body1.next().next())
	}

	test "addBodyPart agrega los SnakeBody como visuales al objeto game" {
		snakeHead.addBodyPart()
		assert.that(game.hasVisual(snakeHead.next()))
	}

	test "changeDirection cambia la dirección de todos los SnakeBody" {
		snakeHead.addBodyPart()
		// Guardo la direccion actual
		const currentDir = snakeHead.direction()
		// Cambio la direccion de la cabeza
		snakeHead.changeDirection(toRight)
		assert.equals(toRight, snakeHead.direction())
		assert.equals(currentDir, snakeHead.next().direction())
	}

	test "changePosition cambia la posición de todos los SnakeBody" {
		snakeHead.addBodyPart()
		// Guardo la dirección actual
		const currentPos = snakeHead.position()
		// Cambio la dirección de la cabeza
		snakeHead.changePosition()
		assert.equals(snakeHead.direction().next(currentPos), snakeHead.position())
		assert.equals(currentPos, snakeHead.next().position())
	}

	test "Si se sale del board, se remueve el evento 'MOVE SNAKE'" {
		game.addVisual(snakeHead)
		game.onTick(snakeHead.speed(), "MOVE SNAKE", { snakeHead.changePosition() })
		6.times{ i => snakeHead.changePosition() }
		assert.that(snakeHead.outOfBoundaries())
		assert.throwsException({ game.removeTickEvent("MOVE SNAKE") })
	}
	
	test "Al llamar removeLast tira error y finaliza el juego si no hay SnakeBody's" {
		assert.throwsException({ snakeHead.removeLast() })
	}
	
	test "Al llamar removeLast se elimina sólo el último SnakeBody" {
		snakeHead.addBodyPart()
		const last = snakeHead.next()
		snakeHead.removeLast()
		assert.equals(null, snakeHead.next())
		assert.equals(null, last.prev())
	}
	
}	
	describe "Administrador"{
		
		test "Observar que al perder no se agreguen de forma visual ningun tipo de comida"{
			game.addVisual(apple)
			game.addVisual(snakeHead)
			game.onTick(snakeHead.speed(), "MOVE SNAKE", { snakeHead.changePosition() })
			gameAdministrator.gameLost("manzana")
			assert.notThat(game.hasVisual(apple))			
		}
	}
	//agregar test de que pasa al chocarse consigo mismo, (ver tema de que se cierra la pantalla al pasar eso)
	
	
	//hay un test que se fija que al usar addBodyPart() se agregue una parte del body, pero no que al comer la manzana se agregue
	
	

